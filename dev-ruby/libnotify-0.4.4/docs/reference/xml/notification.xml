<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="NotifyNotification">
<refmeta>
<refentrytitle role="top_of_page">NotifyNotification</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBNOTIFY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>NotifyNotification</refname>
<refpurpose>A passive pop-up notification.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



#define     <link linkend="NOTIFY-EXPIRES-DEFAULT:CAPS">NOTIFY_EXPIRES_DEFAULT</link>
#define     <link linkend="NOTIFY-EXPIRES-NEVER:CAPS">NOTIFY_EXPIRES_NEVER</link>
            <link linkend="NotifyNotification-struct">NotifyNotification</link>;
enum        <link linkend="NotifyUrgency">NotifyUrgency</link>;
<link linkend="void">void</link>        (<link linkend="NotifyActionCallback">*NotifyActionCallback</link>)         (<link linkend="NotifyNotification">NotifyNotification</link> *,
                                             <link linkend="gchar">gchar</link> *,
                                             <link linkend="gpointer">gpointer</link> );
#define     <link linkend="NOTIFY-ACTION-CALLBACK:CAPS">NOTIFY_ACTION_CALLBACK</link>          (func)
<link linkend="NotifyNotification">NotifyNotification</link>* <link linkend="notify-notification-new">notify_notification_new</link> (const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon,
                                             <link linkend="GtkWidget">GtkWidget</link> *attach);
<link linkend="NotifyNotification">NotifyNotification</link>* <link linkend="notify-notification-new-with-status-icon">notify_notification_new_with_status_icon</link>
                                            (const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon,
                                             <link linkend="GtkStatusIcon">GtkStatusIcon</link> *status_icon);
<link linkend="gboolean">gboolean</link>    <link linkend="notify-notification-update">notify_notification_update</link>      (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon);
<link linkend="void">void</link>        <link linkend="notify-notification-attach-to-widget">notify_notification_attach_to_widget</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GtkWidget">GtkWidget</link> *attach);
<link linkend="void">void</link>        <link linkend="notify-notification-attach-to-status-icon">notify_notification_attach_to_status_icon</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GtkStatusIcon">GtkStatusIcon</link> *status_icon);
<link linkend="void">void</link>        <link linkend="notify-notification-set-geometry-hints">notify_notification_set_geometry_hints</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GdkScreen">GdkScreen</link> *screen,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);
<link linkend="gboolean">gboolean</link>    <link linkend="notify-notification-show">notify_notification_show</link>        (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GError">GError</link> **error);
<link linkend="void">void</link>        <link linkend="notify-notification-set-timeout">notify_notification_set_timeout</link> (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="gint">gint</link> timeout);
<link linkend="void">void</link>        <link linkend="notify-notification-set-category">notify_notification_set_category</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="char">char</link> *category);
<link linkend="void">void</link>        <link linkend="notify-notification-set-urgency">notify_notification_set_urgency</link> (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="NotifyUrgency">NotifyUrgency</link> urgency);
<link linkend="void">void</link>        <link linkend="notify-notification-set-icon-from-pixbuf">notify_notification_set_icon_from_pixbuf</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *icon);
<link linkend="void">void</link>        <link linkend="notify-notification-set-hint-int32">notify_notification_set_hint_int32</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gint">gint</link> value);
<link linkend="void">void</link>        <link linkend="notify-notification-set-hint-double">notify_notification_set_hint_double</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gdouble">gdouble</link> value);
<link linkend="void">void</link>        <link linkend="notify-notification-set-hint-string">notify_notification_set_hint_string</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *value);
<link linkend="void">void</link>        <link linkend="notify-notification-set-hint-byte">notify_notification_set_hint_byte</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="guchar">guchar</link> value);
<link linkend="void">void</link>        <link linkend="notify-notification-set-hint-byte-array">notify_notification_set_hint_byte_array</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="guchar">guchar</link> *value,
                                             <link linkend="gsize">gsize</link> len);
<link linkend="void">void</link>        <link linkend="notify-notification-clear-hints">notify_notification_clear_hints</link> (<link linkend="NotifyNotification">NotifyNotification</link> *notification);
<link linkend="void">void</link>        <link linkend="notify-notification-add-action">notify_notification_add_action</link>  (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="char">char</link> *action,
                                             const <link linkend="char">char</link> *label,
                                             <link linkend="NotifyActionCallback">NotifyActionCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GFreeFunc">GFreeFunc</link> free_func);
<link linkend="void">void</link>        <link linkend="notify-notification-clear-actions">notify_notification_clear_actions</link>
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification);
<link linkend="gboolean">gboolean</link>    <link linkend="notify-notification-close">notify_notification_close</link>       (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GError">GError</link> **error);

</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----NotifyNotification
</synopsis>

</refsect1>





<refsect1 role="properties">
<title role="properties.title">Properties</title>
<synopsis>

  &quot;<link linkend="NotifyNotification--attach-widget">attach-widget</link>&quot;        <link linkend="GtkWidget">GtkWidget</link>             : Read / Write / Construct
  &quot;<link linkend="NotifyNotification--body">body</link>&quot;                 <link linkend="gchararray">gchararray</link>            : Read / Write / Construct
  &quot;<link linkend="NotifyNotification--icon-name">icon-name</link>&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct
  &quot;<link linkend="NotifyNotification--status-icon">status-icon</link>&quot;          <link linkend="GtkStatusIcon">GtkStatusIcon</link>         : Read / Write / Construct
  &quot;<link linkend="NotifyNotification--summary">summary</link>&quot;              <link linkend="gchararray">gchararray</link>            : Read / Write / Construct
</synopsis>
</refsect1>

<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

&quot;<link linkend="NotifyNotification-closed">closed</link>&quot;    <link linkend="void">void</link>        user_function      (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                            <link linkend="gpointer">gpointer</link>            user_data)         : Run first
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="NotifyNotification"><type>NotifyNotification</type></link> represents a passive pop-up notification. It can
contain summary text, body text, and an icon, as well as hints specifying
how the notification should be presented. The notification is rendered
by a notification daemon, and may present the notification in any number
of ways. As such, there is a clear separation of content and presentation,
and this API enforces that.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="NOTIFY-EXPIRES-DEFAULT:CAPS" role="macro"/>NOTIFY_EXPIRES_DEFAULT</title>
<indexterm><primary>NOTIFY_EXPIRES_DEFAULT</primary></indexterm><programlisting>#define NOTIFY_EXPIRES_DEFAULT -1
</programlisting>
<para>
The default expiration time on a notification.
</para></refsect2>
<refsect2>
<title><anchor id="NOTIFY-EXPIRES-NEVER:CAPS" role="macro"/>NOTIFY_EXPIRES_NEVER</title>
<indexterm><primary>NOTIFY_EXPIRES_NEVER</primary></indexterm><programlisting>#define NOTIFY_EXPIRES_NEVER    0
</programlisting>
<para>
The notification never expires. It stays open until closed by the calling API
or the user.
</para></refsect2>
<refsect2>
<title><anchor id="NotifyNotification-struct" role="struct"/>NotifyNotification</title>
<indexterm><primary>NotifyNotification</primary></indexterm><programlisting>typedef struct _NotifyNotification NotifyNotification;</programlisting>
<para>
This is an opaque structure representing a notification. This should
not be used directly. Use the accessor functions below.
</para></refsect2>
<refsect2>
<title><anchor id="NotifyUrgency" role="enum"/>enum NotifyUrgency</title>
<indexterm><primary>NotifyUrgency</primary></indexterm><programlisting>typedef enum
{
	NOTIFY_URGENCY_LOW,
	NOTIFY_URGENCY_NORMAL,
	NOTIFY_URGENCY_CRITICAL,

} NotifyUrgency;
</programlisting>
<para>
The urgency level of the notification.
</para><variablelist role="enum">
<varlistentry>
<term><anchor id="NOTIFY-URGENCY-LOW:CAPS" role="constant"/><literal>NOTIFY_URGENCY_LOW</literal></term>
<listitem><simpara>
	Low urgency. Used for unimportant notifications.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="NOTIFY-URGENCY-NORMAL:CAPS" role="constant"/><literal>NOTIFY_URGENCY_NORMAL</literal></term>
<listitem><simpara>
	Normal urgency. Used for most standard notifications.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="NOTIFY-URGENCY-CRITICAL:CAPS" role="constant"/><literal>NOTIFY_URGENCY_CRITICAL</literal></term>
<listitem><simpara>
	Critical urgency. Used for very important notifications.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NotifyActionCallback" role="function"/>NotifyActionCallback ()</title>
<indexterm><primary>NotifyActionCallback</primary></indexterm><programlisting><link linkend="void">void</link>        (*NotifyActionCallback)         (<link linkend="NotifyNotification">NotifyNotification</link> *,
                                             <link linkend="gchar">gchar</link> *,
                                             <link linkend="gpointer">gpointer</link> );</programlisting>
<para>
An action callback function.
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>The action ID.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>User data.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="NOTIFY-ACTION-CALLBACK:CAPS" role="macro"/>NOTIFY_ACTION_CALLBACK()</title>
<indexterm><primary>NOTIFY_ACTION_CALLBACK</primary></indexterm><programlisting>#define NOTIFY_ACTION_CALLBACK(func) ((NotifyActionCallback)(func))
</programlisting>
<para>
A convenience macro for casting a function to a <link linkend="NotifyActionCallback"><type>NotifyActionCallback</type></link>. This
is much like <link linkend="G-CALLBACK:CAPS"><function>G_CALLBACK()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>The function to cast.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-new" role="function"/>notify_notification_new ()</title>
<indexterm><primary>notify_notification_new</primary></indexterm><programlisting><link linkend="NotifyNotification">NotifyNotification</link>* notify_notification_new (const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon,
                                             <link linkend="GtkWidget">GtkWidget</link> *attach);</programlisting>
<para>
Creates a new <link linkend="NotifyNotification"><type>NotifyNotification</type></link>. The summary text is required, but
all other parameters are optional.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>summary</parameter>&nbsp;:</term>
<listitem><simpara> The required summary text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>body</parameter>&nbsp;:</term>
<listitem><simpara> The optional body text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon</parameter>&nbsp;:</term>
<listitem><simpara> The optional icon theme icon name or filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attach</parameter>&nbsp;:</term>
<listitem><simpara> The optional widget to attach to.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The new <link linkend="NotifyNotification"><type>NotifyNotification</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-new-with-status-icon" role="function" condition="since:0.4.1"/>notify_notification_new_with_status_icon ()</title>
<indexterm role="0.4.1"><primary>notify_notification_new_with_status_icon</primary></indexterm><programlisting><link linkend="NotifyNotification">NotifyNotification</link>* notify_notification_new_with_status_icon
                                            (const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon,
                                             <link linkend="GtkStatusIcon">GtkStatusIcon</link> *status_icon);</programlisting>
<para>
Creates a new <link linkend="NotifyNotification"><type>NotifyNotification</type></link> and attaches to a <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link>.
The summary text and <parameter>status_icon</parameter> is required, but all other parameters
are optional.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>summary</parameter>&nbsp;:</term>
<listitem><simpara> The required summary text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>body</parameter>&nbsp;:</term>
<listitem><simpara> The optional body text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon</parameter>&nbsp;:</term>
<listitem><simpara> The optional icon theme icon name or filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_icon</parameter>&nbsp;:</term>
<listitem><simpara> The required <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The new <link linkend="NotifyNotification"><type>NotifyNotification</type></link>.

</simpara></listitem></varlistentry>
</variablelist><para>Since  0.4.1
</para></refsect2>
<refsect2>
<title><anchor id="notify-notification-update" role="function"/>notify_notification_update ()</title>
<indexterm><primary>notify_notification_update</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_notification_update      (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *summary,
                                             const <link linkend="gchar">gchar</link> *body,
                                             const <link linkend="gchar">gchar</link> *icon);</programlisting>
<para>
Updates the notification text and icon. This won't send the update out
and display it on the screen. For that, you will need to call
<link linkend="notify-notification-show"><function>notify_notification_show()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification to update.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>summary</parameter>&nbsp;:</term>
<listitem><simpara> The new required summary text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>body</parameter>&nbsp;:</term>
<listitem><simpara> The optional body text.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon</parameter>&nbsp;:</term>
<listitem><simpara> The optional icon theme icon name or filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, unless an invalid parameter was passed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-attach-to-widget" role="function"/>notify_notification_attach_to_widget ()</title>
<indexterm><primary>notify_notification_attach_to_widget</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_attach_to_widget
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GtkWidget">GtkWidget</link> *attach);</programlisting>
<para>
Attaches the notification to a widget. This will set hints on the
notification requesting that the notification point to the widget's
location. If <parameter>attach</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the widget will be unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attach</parameter>&nbsp;:</term>
<listitem><simpara> The widget to attach to, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-attach-to-status-icon" role="function" condition="since:0.4.1"/>notify_notification_attach_to_status_icon ()</title>
<indexterm role="0.4.1"><primary>notify_notification_attach_to_status_icon</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_attach_to_status_icon
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GtkStatusIcon">GtkStatusIcon</link> *status_icon);</programlisting>
<para>
Attaches the notification to a <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link>. This will set hints on the
notification requesting that the notification point to the status icon's
location. If <parameter>status_icon</parameter> is <link linkend="NULL:CAPS"><literal>NULL</literal></link>, the status icon will be unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_icon</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GtkStatusIcon"><type>GtkStatusIcon</type></link> to attach to, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist><para>Since  0.4.1
</para></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-geometry-hints" role="function" condition="since:0.4.1"/>notify_notification_set_geometry_hints ()</title>
<indexterm role="0.4.1"><primary>notify_notification_set_geometry_hints</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_geometry_hints
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GdkScreen">GdkScreen</link> *screen,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y);</programlisting>
<para>
Sets the geometry hints on the notification. This sets the screen
the notification should appear on and the X, Y coordinates it should
point to, if the particular notification supports X, Y hints.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>screen</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GdkScreen"><type>GdkScreen</type></link> the notification should appear on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> The X coordinate to point to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> The Y coordinate to point to.
</simpara></listitem></varlistentry>
</variablelist><para>Since  0.4.1
</para></refsect2>
<refsect2>
<title><anchor id="notify-notification-show" role="function"/>notify_notification_show ()</title>
<indexterm><primary>notify_notification_show</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_notification_show        (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Tells the notification server to display the notification on the screen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> The returned error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful. On error, this will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and set
         <parameter>error</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-timeout" role="function"/>notify_notification_set_timeout ()</title>
<indexterm><primary>notify_notification_set_timeout</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_timeout (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="gint">gint</link> timeout);</programlisting>
<para>
Sets the timeout of the notification. To set the default time, pass
<link linkend="NOTIFY-EXPIRES-DEFAULT:CAPS"><literal>NOTIFY_EXPIRES_DEFAULT</literal></link> as <parameter>timeout</parameter>. To set the notification to never
expire, pass <link linkend="NOTIFY-EXPIRES-NEVER:CAPS"><literal>NOTIFY_EXPIRES_NEVER</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>timeout</parameter>&nbsp;:</term>
<listitem><simpara> The timeout in milliseconds.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-category" role="function"/>notify_notification_set_category ()</title>
<indexterm><primary>notify_notification_set_category</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_category
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="char">char</link> *category);</programlisting>
<para>
Sets the category of this notification. This can be used by the
notification server to filter or display the data in a certain way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category</parameter>&nbsp;:</term>
<listitem><simpara> The category.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-urgency" role="function"/>notify_notification_set_urgency ()</title>
<indexterm><primary>notify_notification_set_urgency</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_urgency (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="NotifyUrgency">NotifyUrgency</link> urgency);</programlisting>
<para>
Sets the urgency level of this notification.
</para>
<para>
See: <link linkend="NotifyUrgency"><type>NotifyUrgency</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>urgency</parameter>&nbsp;:</term>
<listitem><simpara> The urgency level.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-icon-from-pixbuf" role="function"/>notify_notification_set_icon_from_pixbuf ()</title>
<indexterm><primary>notify_notification_set_icon_from_pixbuf</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_icon_from_pixbuf
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GdkPixbuf">GdkPixbuf</link> *icon);</programlisting>
<para>
Sets the icon in the notification from a <link linkend="GdkPixbuf"><type>GdkPixbuf</type></link>.
</para>
<para>
This will only work when libnotify is compiled against D-BUS 0.60 or
higher.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>icon</parameter>&nbsp;:</term>
<listitem><simpara> The icon.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-hint-int32" role="function"/>notify_notification_set_hint_int32 ()</title>
<indexterm><primary>notify_notification_set_hint_int32</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_hint_int32
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gint">gint</link> value);</programlisting>
<para>
Sets a hint with a 32-bit integer value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> The hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The hint's value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-hint-double" role="function"/>notify_notification_set_hint_double ()</title>
<indexterm><primary>notify_notification_set_hint_double</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_hint_double
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="gdouble">gdouble</link> value);</programlisting>
<para>
Sets a hint with a double value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> The hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The hint's value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-hint-string" role="function"/>notify_notification_set_hint_string ()</title>
<indexterm><primary>notify_notification_set_hint_string</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_hint_string
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Sets a hint with a string value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> The hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The hint's value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-hint-byte" role="function"/>notify_notification_set_hint_byte ()</title>
<indexterm><primary>notify_notification_set_hint_byte</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_hint_byte
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             <link linkend="guchar">guchar</link> value);</programlisting>
<para>
Sets a hint with a byte value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> The hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The hint's value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-set-hint-byte-array" role="function"/>notify_notification_set_hint_byte_array ()</title>
<indexterm><primary>notify_notification_set_hint_byte_array</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_set_hint_byte_array
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="gchar">gchar</link> *key,
                                             const <link linkend="guchar">guchar</link> *value,
                                             <link linkend="gsize">gsize</link> len);</programlisting>
<para>
Sets a hint with a byte array value. The length of <parameter>value</parameter> must be passed
as <parameter>len</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> The hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> The hint's value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> The length of the byte array.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-clear-hints" role="function"/>notify_notification_clear_hints ()</title>
<indexterm><primary>notify_notification_clear_hints</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_clear_hints (<link linkend="NotifyNotification">NotifyNotification</link> *notification);</programlisting>
<para>
Clears all hints from the notification.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-add-action" role="function"/>notify_notification_add_action ()</title>
<indexterm><primary>notify_notification_add_action</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_add_action  (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             const <link linkend="char">char</link> *action,
                                             const <link linkend="char">char</link> *label,
                                             <link linkend="NotifyActionCallback">NotifyActionCallback</link> callback,
                                             <link linkend="gpointer">gpointer</link> user_data,
                                             <link linkend="GFreeFunc">GFreeFunc</link> free_func);</programlisting>
<para>
Adds an action to a notification. When the action is invoked, the
specified callback function will be called, along with the value passed
to <parameter>user_data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action</parameter>&nbsp;:</term>
<listitem><simpara> The action ID.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&nbsp;:</term>
<listitem><simpara> The human-readable action label.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> The action's callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> Optional custom data to pass to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_func</parameter>&nbsp;:</term>
<listitem><simpara> An optional function to free <parameter>user_data</parameter> when the notification
            is destroyed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-clear-actions" role="function"/>notify_notification_clear_actions ()</title>
<indexterm><primary>notify_notification_clear_actions</primary></indexterm><programlisting><link linkend="void">void</link>        notify_notification_clear_actions
                                            (<link linkend="NotifyNotification">NotifyNotification</link> *notification);</programlisting>
<para>
Clears all actions from the notification.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-notification-close" role="function"/>notify_notification_close ()</title>
<indexterm><primary>notify_notification_close</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_notification_close       (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Tells the notification server to hide the notification on the screen.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The notification.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> The returned error information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful. On error, this will return <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and set
         <parameter>error</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2><title><anchor id="NotifyNotification--attach-widget"/>The &quot;<literal>attach-widget</literal>&quot; property</title>
<indexterm><primary>NotifyNotification:attach-widget</primary></indexterm><programlisting>  &quot;attach-widget&quot;        <link linkend="GtkWidget">GtkWidget</link>             : Read / Write / Construct</programlisting>
<para>The widget to attach the notification to.</para></refsect2>
<refsect2><title><anchor id="NotifyNotification--body"/>The &quot;<literal>body</literal>&quot; property</title>
<indexterm><primary>NotifyNotification:body</primary></indexterm><programlisting>  &quot;body&quot;                 <link linkend="gchararray">gchararray</link>            : Read / Write / Construct</programlisting>
<para>The message body text.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="NotifyNotification--icon-name"/>The &quot;<literal>icon-name</literal>&quot; property</title>
<indexterm><primary>NotifyNotification:icon-name</primary></indexterm><programlisting>  &quot;icon-name&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct</programlisting>
<para>The icon filename or icon theme-compliant name.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="NotifyNotification--status-icon"/>The &quot;<literal>status-icon</literal>&quot; property</title>
<indexterm><primary>NotifyNotification:status-icon</primary></indexterm><programlisting>  &quot;status-icon&quot;          <link linkend="GtkStatusIcon">GtkStatusIcon</link>         : Read / Write / Construct</programlisting>
<para>The status icon to attach the notification to.</para></refsect2>
<refsect2><title><anchor id="NotifyNotification--summary"/>The &quot;<literal>summary</literal>&quot; property</title>
<indexterm><primary>NotifyNotification:summary</primary></indexterm><programlisting>  &quot;summary&quot;              <link linkend="gchararray">gchararray</link>            : Read / Write / Construct</programlisting>
<para>The summary text.</para><para>Default value: NULL</para>
</refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="NotifyNotification-closed"/>The &quot;closed&quot; signal</title>
<indexterm><primary>NotifyNotification::closed</primary></indexterm><programlisting><link linkend="void">void</link>        user_function                  (<link linkend="NotifyNotification">NotifyNotification</link> *notification,
                                            <link linkend="gpointer">gpointer</link>            user_data)         : Run first</programlisting>
<para>
Emitted when the notification is closed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>notification</parameter>&nbsp;:</term>
<listitem><simpara> The object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
