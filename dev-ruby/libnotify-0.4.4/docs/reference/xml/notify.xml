<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libnotify-notify">
<refmeta>
<refentrytitle role="top_of_page">notify</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBNOTIFY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>notify</refname>
<refpurpose>Notification API</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="gboolean">gboolean</link>    <link linkend="notify-init">notify_init</link>                     (const <link linkend="char">char</link> *app_name);
<link linkend="void">void</link>        <link linkend="notify-uninit">notify_uninit</link>                   (void);
<link linkend="gboolean">gboolean</link>    <link linkend="notify-is-initted">notify_is_initted</link>               (void);
const <link linkend="gchar">gchar</link>* <link linkend="notify-get-app-name">notify_get_app_name</link>            (void);
<link linkend="GList">GList</link>*      <link linkend="notify-get-server-caps">notify_get_server_caps</link>          (void);
<link linkend="gboolean">gboolean</link>    <link linkend="notify-get-server-info">notify_get_server_info</link>          (<link linkend="char">char</link> **ret_name,
                                             <link linkend="char">char</link> **ret_vendor,
                                             <link linkend="char">char</link> **ret_version,
                                             <link linkend="char">char</link> **ret_spec_version);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="notify-init" role="function"/>notify_init ()</title>
<indexterm><primary>notify_init</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_init                     (const <link linkend="char">char</link> *app_name);</programlisting>
<para>
Initialized libnotify. This must be called before any other functions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app_name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the application initializing libnotify.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-uninit" role="function"/>notify_uninit ()</title>
<indexterm><primary>notify_uninit</primary></indexterm><programlisting><link linkend="void">void</link>        notify_uninit                   (void);</programlisting>
<para>
Uninitialized libnotify.
</para>
<para>
This should be called when the program no longer needs libnotify for
the rest of its lifecycle, typically just before exitting.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="notify-is-initted" role="function"/>notify_is_initted ()</title>
<indexterm><primary>notify_is_initted</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_is_initted               (void);</programlisting>
<para>
Gets whether or not libnotify is initialized.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if libnotify is initialized, or <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-get-app-name" role="function"/>notify_get_app_name ()</title>
<indexterm><primary>notify_get_app_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* notify_get_app_name            (void);</programlisting>
<para>
Gets the application name registered.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The registered application name, passed to <link linkend="notify-init"><function>notify_init()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-get-server-caps" role="function"/>notify_get_server_caps ()</title>
<indexterm><primary>notify_get_server_caps</primary></indexterm><programlisting><link linkend="GList">GList</link>*      notify_get_server_caps          (void);</programlisting>
<para>
Queries the server for its capabilities and returns them in a <link linkend="GList"><type>GList</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of server capability strings.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="notify-get-server-info" role="function"/>notify_get_server_info ()</title>
<indexterm><primary>notify_get_server_info</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    notify_get_server_info          (<link linkend="char">char</link> **ret_name,
                                             <link linkend="char">char</link> **ret_vendor,
                                             <link linkend="char">char</link> **ret_version,
                                             <link linkend="char">char</link> **ret_spec_version);</programlisting>
<para>
Queries the server for its information, specifically, the name, vendor,
server version, and the version of the notifications specification that it
is compliant with.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_name</parameter>&nbsp;:</term>
<listitem><simpara> The resulting server name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_vendor</parameter>&nbsp;:</term>
<listitem><simpara> The resulting server vendor.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_version</parameter>&nbsp;:</term>
<listitem><simpara> The resulting server version.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_spec_version</parameter>&nbsp;:</term>
<listitem><simpara> The resulting version of the specification the server is
                   compliant with.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if successful, and the variables passed will be set. <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>
         on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
